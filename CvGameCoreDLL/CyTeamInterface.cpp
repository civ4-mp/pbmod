#include "CvGameCoreDLL.h"
#include "CyArea.h"
#include "CyTeam.h"

//
// published python interface for CyTeam
//

void CyTeamPythonInterface()
{
	OutputDebugString("Python Extension Module - CyTeamPythonInterface\n");

	python::class_<CyTeam>("CyTeam")
		.def("isNone", &CyTeam::isNone, "bool () - is this instance valid?")

		.def("addTeam", &CyTeam::addTeam, "void (int (TeamTypes) eTeam)")

		.def("canChangeWarPeace", &CyTeam::canChangeWarPeace, "bool (int (TeamTypes) eTeam)")
		.def("canDeclareWar", &CyTeam::canDeclareWar, "bool (int (TeamTypes) eTeam)")
		.def("declareWar", &CyTeam::declareWar, "void (int (TeamTypes) eTeam, bool bNewDiplo, int (WarPlanTypes) eWarPlan) - Forces your team to declare War on iTeam")
		.def("makePeace", &CyTeam::makePeace, "void (int (TeamTypes) eTeam) - Forces peace between your team and iTeam")
		.def("canContact", &CyTeam::canContact, "bool (int (TeamTypes) eTeam)")
		.def("meet", &CyTeam::meet, "void (int (TeamTypes) eTeam, bool bNewDiplo) - forces team to meet iTeam")
		.def("signOpenBorders", &CyTeam::signOpenBorders, "void (int (TeamTypes) eTeam)")
		.def("signDefensivePact", &CyTeam::signDefensivePact, "void (int (TeamTypes) eTeam)")

		.def("getAssets", &CyTeam::getAssets, "int ()")
		.def("getPower", &CyTeam::getPower, "int (bool bIncludeVassals)")
		.def("getDefensivePower", &CyTeam::getDefensivePower, "int ()")
		.def("getNumNukeUnits", &CyTeam::getNumNukeUnits, "int ()")

		.def("getAtWarCount", &CyTeam::getAtWarCount, "int (bool bIgnoreMinors)")
		.def("getWarPlanCount", &CyTeam::getWarPlanCount, "int (int (WarPlanTypes) eWarPlan, bool bIgnoreMinors)")
		.def("getAnyWarPlanCount", &CyTeam::getAnyWarPlanCount, "int (bool bIgnoreMinors)")
		.def("getChosenWarCount", &CyTeam::getChosenWarCount, "int (bool bIgnoreMinors)")
		.def("getHasMetCivCount", &CyTeam::getHasMetCivCount, "int (bool bIgnoreMinors)")
		.def("hasMetHuman", &CyTeam::hasMetHuman, "bool ()")
		.def("getDefensivePactCount", &CyTeam::getDefensivePactCount, "int ()")
		.def("isAVassal", &CyTeam::isAVassal, "bool ()")

		.def("getUnitClassMaking", &CyTeam::getUnitClassMaking, "int (int (UnitClassTypes) eUnitClass)")
		.def("getUnitClassCountPlusMaking", &CyTeam::getUnitClassCountPlusMaking, "int (int (UnitClassTypes) eUnitClass)")
		.def("getBuildingClassMaking", &CyTeam::getBuildingClassMaking, "int (int (BuildingClassTypes) eBuildingClass)")
		.def("getBuildingClassCountPlusMaking", &CyTeam::getBuildingClassCountPlusMaking, "int (int (BuildingClassTypes) eBuildingClass)")
		.def("getHasReligionCount", &CyTeam::getHasReligionCount, "int (int (ReligionTypes) eReligion)")
		.def("getHasCorporationCount", &CyTeam::getHasCorporationCount, "int (int (CorporationTypes) eReligion)")

		.def("countTotalCulture", &CyTeam::countTotalCulture, "int ()")

		.def("countNumUnitsByArea", &CyTeam::countNumUnitsByArea, "int (CyArea* pArea)")
		.def("countNumCitiesByArea", &CyTeam::countNumCitiesByArea, "int (CyArea* pArea)")
		.def("countTotalPopulationByArea", &CyTeam::countTotalPopulationByArea, "int (CyArea* pArea)")
		.def("countPowerByArea", &CyTeam::countPowerByArea, "int (CyArea* pArea)")
		.def("countEnemyPowerByArea", &CyTeam::countEnemyPowerByArea, "int (CyArea* pArea)")
		.def("countNumAIUnitsByArea", &CyTeam::countNumAIUnitsByArea, "int (CyArea* pArea, int (UnitAITypes) eUnitAI)")
		.def("countEnemyDangerByArea", &CyTeam::countEnemyDangerByArea, "int (CyArea* pArea)")

		.def("getResearchCost", &CyTeam::getResearchCost, "int (int (TechTypes) eTech) - total cost of Tech")
		.def("getResearchLeft", &CyTeam::getResearchLeft, "int (int (TechTypes) eTech) - Amount of remaining research necessary")

		.def("hasHolyCity", &CyTeam::hasHolyCity, "bool (int (ReligionTypes) eReligion) - does this team have eReligion's holy city?")
		.def("hasHeadquarters", &CyTeam::hasHeadquarters, "bool (int (CorporationTypes) eCorporation) - does this team have eCorporation's headquarters?")

		.def("isHuman", &CyTeam::isHuman, "bool () - is human team?")
		.def("isBarbarian", &CyTeam::isBarbarian, "bool () - is barbarian team?")
		.def("isMinorCiv", &CyTeam::isMinorCiv, "bool ()")
		.def("isWatchingCiv", &CyTeam::isWatchingCiv, "bool ()")
		.def("getLeaderID", &CyTeam::getLeaderID, "int (PlayerTypes*/ ()")
		.def("getSecretaryID", &CyTeam::getSecretaryID, "int (PlayerTypes*/ ()")
		.def("getHandicapType", &CyTeam::getHandicapType, "int (HandicapTypes*/ ()")
		.def("getName", &CyTeam::getName, "wstring ()")

		.def("getNumMembers", &CyTeam::getNumMembers, "int ()")
		.def("isAlive", &CyTeam::isAlive, "bool ()")
		.def("isEverAlive", &CyTeam::isEverAlive, "bool ()")
		.def("getNumCities", &CyTeam::getNumCities, "int ()")
		.def("getTotalPopulation", &CyTeam::getTotalPopulation, "int ()")
		.def("getTotalLand", &CyTeam::getTotalLand, "int ()")
		.def("getNukeInterception", &CyTeam::getNukeInterception, "int ()")
		.def("changeNukeInterception", &CyTeam::changeNukeInterception, "void (int iChange)")

		.def("getForceTeamVoteEligibilityCount", &CyTeam::getForceTeamVoteEligibilityCount, "int (int (VoteSourceTypes) eVoteSource)")
		.def("isForceTeamVoteEligible", &CyTeam::isForceTeamVoteEligible, "bool (int (VoteSourceTypes) eVoteSource)")
		.def("changeForceTeamVoteEligibilityCount", &CyTeam::changeForceTeamVoteEligibilityCount, "void (int (VoteSourceTypes) eVoteSource, int iChange)")
		.def("getExtraWaterSeeFromCount", &CyTeam::getExtraWaterSeeFromCount, "int ()")
		.def("isExtraWaterSeeFrom", &CyTeam::isExtraWaterSeeFrom, "bool ()")
		.def("changeExtraWaterSeeFromCount", &CyTeam::changeExtraWaterSeeFromCount, "void (int iChange)")
		.def("getMapTradingCount", &CyTeam::getMapTradingCount, "int ()")
		.def("isMapTrading", &CyTeam::isMapTrading, "bool () - map is ready")
		.def("changeMapTradingCount", &CyTeam::changeMapTradingCount, "void (int iChange)")
		.def("getTechTradingCount", &CyTeam::getTechTradingCount, "int ()")
		.def("isTechTrading", &CyTeam::isTechTrading, "bool () - tech trading?")
		.def("changeTechTradingCount", &CyTeam::changeTechTradingCount, "void (int iChange)")
		.def("getGoldTradingCount", &CyTeam::getGoldTradingCount, "int ()")
		.def("isGoldTrading", &CyTeam::isGoldTrading, "bool () - gold trading?")
		.def("changeGoldTradingCount", &CyTeam::changeGoldTradingCount, "void (int iChange)")
		.def("getOpenBordersTradingCount", &CyTeam::getOpenBordersTradingCount, "int ()")
		.def("isOpenBordersTrading", &CyTeam::isOpenBordersTrading, "bool ()")
		.def("changeOpenBordersTradingCount", &CyTeam::changeOpenBordersTradingCount, "void (int iChange)")
		.def("getDefensivePactTradingCount", &CyTeam::getDefensivePactTradingCount, "int ()")
		.def("isDefensivePactTrading", &CyTeam::isDefensivePactTrading, "bool ()")
		.def("changeDefensivePactTradingCount", &CyTeam::changeDefensivePactTradingCount, "void (int iChange)")
		.def("getPermanentAllianceTradingCount", &CyTeam::getPermanentAllianceTradingCount, "int ()")
		.def("isPermanentAllianceTrading", &CyTeam::isPermanentAllianceTrading, "bool ()")
		.def("changePermanentAllianceTradingCount", &CyTeam::changePermanentAllianceTradingCount, "void (int iChange)")
		.def("getVassalTradingCount", &CyTeam::getVassalTradingCount, "int ()")
		.def("isVassalStateTrading", &CyTeam::isVassalStateTrading, "bool ()")
		.def("changeVassalTradingCount", &CyTeam::changeVassalTradingCount, "void (int iChange)")
		.def("getBridgeBuildingCount", &CyTeam::getBridgeBuildingCount, "int ()")
		.def("isBridgeBuilding", &CyTeam::isBridgeBuilding, "bool ()")
		.def("changeBridgeBuildingCount", &CyTeam::changeBridgeBuildingCount, "void (int iChange)")
		.def("getIrrigationCount", &CyTeam::getIrrigationCount, "int ()")
		.def("isIrrigation", &CyTeam::isIrrigation, "bool ()")
		.def("changeIrrigationCount", &CyTeam::changeIrrigationCount, "void (int iChange)")
		.def("getIgnoreIrrigationCount", &CyTeam::getIgnoreIrrigationCount, "int ()")
		.def("isIgnoreIrrigation", &CyTeam::isIgnoreIrrigation, "bool ()")
		.def("changeIgnoreIrrigationCount", &CyTeam::changeIgnoreIrrigationCount, "void (int iChange)")
		.def("getWaterWorkCount", &CyTeam::getWaterWorkCount, "int ()")
		.def("isWaterWork", &CyTeam::isWaterWork, "bool ()")
		.def("changeWaterWorkCount", &CyTeam::changeWaterWorkCount, "void (int iChange)")

		.def("getVassalPower", &CyTeam::getVassalPower, "int ()")
		.def("setVassalPower", &CyTeam::setVassalPower, "void (int iPower)")
		.def("getMasterPower", &CyTeam::getMasterPower, "int ()")
		.def("setMasterPower", &CyTeam::setMasterPower, "void (int iPower)")

		.def("isMapCentering", &CyTeam::isMapCentering, "bool () - map is centered")
		.def("setMapCentering", &CyTeam::setMapCentering, "void (bool bNewValue)")

		.def("getEnemyWarWearinessModifier", &CyTeam::getEnemyWarWearinessModifier, "int ()")
		.def("changeEnemyWarWearinessModifier", &CyTeam::changeEnemyWarWearinessModifier, "void (int iChange)")

		.def("getID", &CyTeam::getID, "int () - team ID")

		.def("isStolenVisibility", &CyTeam::isStolenVisibility, "bool (int (TeamTypes) eIndex)")
		.def("getWarWeariness", &CyTeam::getWarWeariness, "int (int (TeamTypes) eIndex)")
		.def("setWarWeariness", &CyTeam::setWarWeariness, "void (int (TeamTypes) eIndex, int iNewValue)")
		.def("changeWarWeariness", &CyTeam::changeWarWeariness, "void (int (TeamTypes) eIndex, int iChange)")
		.def("getTechShareCount", &CyTeam::getTechShareCount, "int (int iIndex)")
		.def("isTechShare", &CyTeam::isTechShare, "bool (int iIndex)")
		.def("changeTechShareCount", &CyTeam::changeTechShareCount, "void (int iIndex, int iChange)")
		.def("getCommerceFlexibleCount", &CyTeam::getCommerceFlexibleCount, "int (int (CommerceTypes) eIndex)")
		.def("isCommerceFlexible", &CyTeam::isCommerceFlexible, "bool (int (CommerceTypes) eIndex)")
		.def("changeCommerceFlexibleCount", &CyTeam::changeCommerceFlexibleCount, "void (int (CommerceTypes) eIndex, int iChange)")

		.def("getExtraMoves", &CyTeam::getExtraMoves, "int (int (DomainTypes) eIndex)")
		.def("changeExtraMoves", &CyTeam::changeExtraMoves, "void (int (DomainTypes) eIndex, int iChange)")

		.def("isHasMet", &CyTeam::isHasMet, "bool (int (TeamTypes) eIndex)")
		.def("isAtWar", &CyTeam::isAtWar, "bool (int (TeamTypes) iIndex)")
		.def("isPermanentWarPeace", &CyTeam::isPermanentWarPeace, "bool (int (TeamTypes) eIndex)")
		.def("setPermanentWarPeace", &CyTeam::setPermanentWarPeace, "void (int (TeamTypes) eIndex, bool bNewValue)")
		.def("isFreeTrade", &CyTeam::isFreeTrade, "bool (int (TeamTypes) eIndex)")
		.def("isOpenBorders", &CyTeam::isOpenBorders, "bool ()")
		.def("isForcePeace", &CyTeam::isForcePeace, "bool (int (TeamTypes) eIndex)")
		.def("isVassal", &CyTeam::isVassal, "bool ()")
		.def("setVassal", &CyTeam::setVassal, "void (int iPower)")
		.def("assignVassal", &CyTeam::assignVassal, "void (int (TeamTypes) eIndex, bool bSurrender)")
		.def("freeVassal", &CyTeam::freeVassal, "void (int (TeamTypes) eIndex)")
		.def("isDefensivePact", &CyTeam::isDefensivePact, "bool ()")
		.def("getRouteChange", &CyTeam::getRouteChange, "int (int (RouteTypes) eIndex) - Route Change caused by RouteType")	
		.def("changeRouteChange", &CyTeam::changeRouteChange, "void (int (RouteTypes) eIndex, int iChange)")
		.def("getProjectCount", &CyTeam::getProjectCount, "int (int (ProjectTypes) eIndex)")
		.def("getProjectDefaultArtType", &CyTeam::getProjectDefaultArtType, "int (int (ProjectTypes) eIndex)")
		.def("setProjectDefaultArtType", &CyTeam::setProjectDefaultArtType, "void (int (ProjectTypes) eIndex, int value)")
		.def("getProjectArtType", &CyTeam::getProjectArtType, "int (int (ProjectTypes) eIndex, int number)")
		.def("setProjectArtType", &CyTeam::setProjectArtType, "void (int (ProjectTypes) eIndex, int number, int value)")
		.def("isProjectMaxedOut", &CyTeam::isProjectMaxedOut, "bool (int (ProjectTypes) eIndex, int iExtra)")
		.def("isProjectAndArtMaxedOut", &CyTeam::isProjectAndArtMaxedOut, "bool (int (ProjectTypes) eIndex)")
		.def("changeProjectCount", &CyTeam::changeProjectCount, "void (int (ProjectTypes) eIndex, int iChange)")
		.def("getProjectMaking", &CyTeam::getProjectMaking, "int (int (ProjectTypes) eIndex)")
		.def("getUnitClassCount", &CyTeam::getUnitClassCount, "int (int (UnitClassTypes) eUnitClass)")
		.def("isUnitClassMaxedOut", &CyTeam::isUnitClassMaxedOut, "bool (int (UnitClassTypes) eIndex, int iExtra)")
		.def("getBuildingClassCount", &CyTeam::getBuildingClassCount, "int (int (BuildingClassTypes) eBuildingClass)")
		.def("isBuildingClassMaxedOut", &CyTeam::isBuildingClassMaxedOut, "bool (int (BuildingClassTypes) eIndex, int iExtra)")
		.def("getObsoleteBuildingCount", &CyTeam::getObsoleteBuildingCount, "int (int (BuildingTypes) eIndex)")
		.def("isObsoleteBuilding", &CyTeam::isObsoleteBuilding, "bool (int (BuildingTypes) eIndex) - is BuildingID obsolete?")

		.def("getResearchProgress", &CyTeam::getResearchProgress, "int (int (TechTypes) eIndex) - progress towards finishing research on TechID")
		.def("setResearchProgress", &CyTeam::setResearchProgress, "void (int (TechTypes) eIndex, int iNewValue, int (PlayerTypes) ePlayer) - sets progress towards TechID")
		.def("changeResearchProgress", &CyTeam::changeResearchProgress, "void (int (TechTypes) eIndex, int iChange, int (PlayerTypes) ePlayer) - edits progress towards TechID")
		.def("isTerrainTrade", &CyTeam::isTerrainTrade, "bool (int (TerrainTypes) eIndex) - will let us know if this terrain type allows trade")
		.def("isRiverTrade", &CyTeam::isRiverTrade, "bool () - will let us know if rivers allow trade")
		.def("getTechCount", &CyTeam::getTechCount, "int (int (TechTypes) eIndex)")

		.def("isHasTech", &CyTeam::isHasTech, "bool (int ( TechTypes ) iIndex) - has the team researched techID")
		.def("setHasTech", &CyTeam::setHasTech, "void (int (TechTypes) eIndex, bool bNewValue, int (PlayerTypes) ePlayer, bool bFirst, bool bAnnounce)")
		.def("isNoTradeTech", &CyTeam::isNoTradeTech, "bool (int ( TechTypes ) iIndex)")
		.def("setNoTradeTech", &CyTeam::setNoTradeTech, "void (int (TechTypes) eIndex, bool bNewValue)")

		.def("getImprovementYieldChange", &CyTeam::getImprovementYieldChange, "int (int (ImprovementTypes) eIndex1, int (YieldTypes) eIndex2)")
		.def("changeImprovementYieldChange", &CyTeam::changeImprovementYieldChange, "void (int (ImprovementTypes) eIndex1, int (YieldTypes) eIndex2, int iChange)")

		.def("getVictoryCountdown", &CyTeam::getVictoryCountdown, "int (int (VictoryTypes) eVictory)")
		.def("getVictoryDelay", &CyTeam::getVictoryDelay, "int (int (VictoryTypes) eVictory)")
		.def("canLaunch", &CyTeam::canLaunch, "bool (int (VictoryTypes) eVictory)")
		.def("getLaunchSuccessRate", &CyTeam::getLaunchSuccessRate, "int (int (VictoryTypes) eVictory)")

		.def("getEspionagePointsAgainstTeam", &CyTeam::getEspionagePointsAgainstTeam, "int (int (TeamTypes) eIndex)")
		.def("setEspionagePointsAgainstTeam", &CyTeam::setEspionagePointsAgainstTeam, "void (int (TeamTypes) eIndex, int iValue)")
		.def("changeEspionagePointsAgainstTeam", &CyTeam::changeEspionagePointsAgainstTeam, "void (int (TeamTypes) eIndex, int iChange)")
		.def("getEspionagePointsEver", &CyTeam::getEspionagePointsEver, "int ()")
		.def("setEspionagePointsEver", &CyTeam::setEspionagePointsEver, "void (int iValue)")
		.def("changeEspionagePointsEver", &CyTeam::changeEspionagePointsEver, "void (int iChange)")
		.def("getCounterespionageTurnsLeftAgainstTeam", &CyTeam::getCounterespionageTurnsLeftAgainstTeam, "int (int (TeamTypes) eIndex)")
		.def("setCounterespionageTurnsLeftAgainstTeam", &CyTeam::setCounterespionageTurnsLeftAgainstTeam, "void (int (TeamTypes) eIndex, int iValue)")
		.def("changeCounterespionageTurnsLeftAgainstTeam", &CyTeam::changeCounterespionageTurnsLeftAgainstTeam, "void (int (TeamTypes) eIndex, int iChange)")
		.def("getCounterespionageModAgainstTeam", &CyTeam::getCounterespionageModAgainstTeam, "int (int (TeamTypes) eIndex)")
		.def("setCounterespionageModAgainstTeam", &CyTeam::setCounterespionageModAgainstTeam, "void (int (TeamTypes) eIndex, int iValue)")
		.def("changeCounterespionageModAgainstTeam", &CyTeam::changeCounterespionageModAgainstTeam, "void (int (TeamTypes) eIndex, int iChange)")
		.def("AI_shareWar", &CyTeam::AI_shareWar, "bool (int (TeamTypes) eTeam)")
		.def("AI_setWarPlan", &CyTeam::AI_setWarPlan, "void (int (TeamTypes) eIndex, int (WarPlanTypes) eNewValue)")
		.def("AI_getAtWarCounter", &CyTeam::AI_getAtWarCounter, "int (int (TeamTypes) eTeam)")
		.def("AI_getAtPeaceCounter", &CyTeam::AI_getAtPeaceCounter, "int (int (TeamTypes) eTeam)")
		.def("AI_getWarSuccess", &CyTeam::AI_getWarSuccess, "int (int (TeamTypes) eIndex)")
		;
}
